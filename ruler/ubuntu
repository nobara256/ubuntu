#!/bin/bash

set -eE
trap 'echo Error: in $0 on line $LINENO' ERR

if [ "$(id -u)" -ne 0 ]; then
    echo "Please run as root"
    exit 1
fi

attach_MOUNTPOINT() {
    local MOUNTPOINT="$1"

    if [ ! -c /dev/mem ]; then
        mknod -m 660 /dev/mem c 1 1
        chown root:kmem /dev/mem
    fi

    mount dev-live -t devtmpfs "$MOUNTPOINT/dev"
    mount devpts-live -t devpts -o nodev,nosuid "$MOUNTPOINT/dev/pts"
    mount proc-live -t proc "$MOUNTPOINT/proc"
    mount sysfs-live -t sysfs "$MOUNTPOINT/sys"
    mount securityfs -t securityfs "$MOUNTPOINT/sys/kernel/security"

    mount -t cgroup2 none "$MOUNTPOINT/sys/fs/cgroup"
    mount -t tmpfs none "$MOUNTPOINT/tmp"
    mount -t tmpfs none "$MOUNTPOINT/var/lib/apt/lists"
    mount -t tmpfs none "$MOUNTPOINT/var/cache/apt"
}

detach_MOUNTPOINT() {
    # Reverse the operations from setup_MOUNTPOINT
    local MOUNTPOINT
    MOUNTPOINT=$(realpath "$1")

    # ensure we have exactly one trailing slash, and escape all slashes for awk
    MOUNTPOINT_match=$(echo "$MOUNTPOINT" | sed -e's,/$,,; s,/,\\/,g;')'\/'
    # sort -r ensures that deeper MOUNTPOINTs are unmounted first
    awk </proc/self/mounts "\$2 ~ /$MOUNTPOINT_match/ { print \$2 }" | LC_ALL=C sort -r | while IFS= read -r submount; do
        mount --make-private "$submount"
        umount "$submount"
    done
}


export RELASE_NAME="Ubuntu 24.10 (Oracular Oriole)"
export RELASE_VERSION="24.10"

export PROJECT=ubuntu-cpc
export SUITE=oracular
export FLAVOR=server

export ARCH=arm64
export IMAGEFORMAT=none
export IMAGE_TARGETS=none

export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true
export LC_ALL=C
export LC_CTYPE=C
export LANGUAGE=C
export LANG=C

export SYSROOT=aarch64




# Create a stock sysroot directory and populate it with debootstrap.
mkdir $SYSROOT
debootstrap      \
    --arch=$ARCH \
    --components=main,universe,multiverse,restricted \
    oracular \
    $SYSROOT \
    "http://ports.ubuntu.com/ubuntu-ports"


# Apply HOSTNAME
echo "ubuntu" > $SYSROOT/etc/hostname


# Attach sysroot.
attach_MOUNTPOINT $SYSROOT

# Update, Upgrade, Add repositories.
chroot $SYSROOT apt update
chroot $SYSROOT apt -y upgrade
chroot $SYSROOT apt -y dist-upgrade
chroot $SYSROOT apt -y install apt-utils software-properties-common python3-launchpadlib
chroot $SYSROOT add-apt-repository -y ppa:jjriek/rockchip          # We need Joshua's repo.
chroot $SYSROOT add-apt-repository -y ppa:oibaf/graphics-drivers   # We need the upstream mesa repo.
chroot $SYSROOT apt update
# chroot $SYSROOT apt -y upgrade
chroot $SYSROOT apt -y install ubuntu-server-rockchip u-boot-orangepi-5-plus u-boot-tools u-boot-menu \
                               linux-firmware cloud-initramfs-growroot grub-efi-arm64 initramfs-tools \
                               mesa-vdpau-drivers mesa-va-drivers mesa-vulkan-drivers vulkan-tools    \
                               cloud-init bash-completion


#### Here Be Monkeys ####
patch --strip=1 --directory=$SYSROOT < patcher/ubuntu/server-1.patch
patch --strip=1 --directory=$SYSROOT < patcher/ubuntu/nobara.repo.patch

#### Adding my kernel packages ####
chroot $SYSROOT apt update
chroot $SYSROOT apt -y install linux-rockchip
chroot $SYSROOT apt -y upgrade

#### Probably don't need this in here ####
# chroot $SYSROOT update-initramfs -u

# Get everything clean.
chroot $SYSROOT apt -y autoremove
chroot $SYSROOT apt autoclean
chroot $SYSROOT apt clean


# Generate ssh keys.
chroot $SYSROOT ssh-keygen -A

#### We should be done by now ####
# Detach sysroot.
detach_MOUNTPOINT $SYSROOT

# Package sysroot.
(cd $SYSROOT &&  tar -p -c --sort=name --xattrs ./*) | xz -3 -T0 > "ubuntu-${RELASE_VERSION}-preinstalled-${FLAVOR}-arm64.rootfs.tar.xz"

# Delete the sysroot directory
rm -rf $SYSROOT

echo "Bye Bye!!"

trap '' EXIT
exit 0
